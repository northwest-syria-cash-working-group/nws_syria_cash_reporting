labels = comma) +
scale_y_log10(breaks = c(0, 1000, 3000, 10000, 30000, 100000),
labels = comma) +
scale_size(breaks = c(0, 100, 500, 1000, 3000)) +
geom_smooth(method = "lm", se = FALSE, colour = "blue") +
labs(title = "Population and beneficiaries by sub-district",
subtitle = "Size indicates dead/wounded per 100,0000",
x = "Population",
y = "Beneficiaries",
size = "Dead/wounded\nper 100k",
caption = "Data from Assistance Coordination Unit and Food Security and Livelihoods Cluster") +
theme(plot.caption = element_text(hjust = .5))
eq %>%
filter(admin3pcode %in% nw_pcode3 &
district %in% c("Harim", "Idleb", "Jisr-Ash-Shugur",
"Afrin", "Jebel Saman", "A'zaz", "Jarablus", "Al Bab")) %>%
group_by(governorate, district, sub_district, admin3pcode) %>%
summarise(casualties = sum(casualties, na.rm = TRUE),
injuries = sum(injuries, na.rm = TRUE),
totally_damaged = sum(completely_destroyed_houses, na.rm = TRUE),
partially_damaged = sum(damaged_unihabitable_houses, na.rm = TRUE)) %>%
# Where is Ariha, and why is it showing up here
filter(district != "Ariha") %>%
left_join(hno %>%
filter(admin3pcode %in% nw_pcode3 &
admin2name_en %in% c("Harim", "Idleb", "Jisr-Ash-Shugur",
"Afrin", "Jebel Saman", "A'zaz", "Jarablus", "Al Bab")) %>%
group_by(admin3pcode) %>%
summarise(population = sum(total_population, na.rm = TRUE)),
by = "admin3pcode") %>%
mutate(wounded_dead = casualties + injuries,
damaged_houses = totally_damaged + partially_damaged,
wounded_dead_100k = round(wounded_dead / population * 100000, digits = 2),
damaged_houses_100k = round(damaged_houses / population * 100000, digits = 2)) %>%
left_join(fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
group_by(admin3pcode) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)),
by = "admin3pcode") %>%
ggplot(aes(x = population, y = beneficiaries)) +
geom_point(aes(size = wounded_dead_100k)) +
geom_text(aes(label = sub_district), hjust = 1, vjust = 1,
size = 2) +
scale_x_log10(breaks = c(0, 3000, 10000, 30000, 100000, 300000, 1000000),
labels = comma) +
scale_y_log10(breaks = c(0, 1000, 3000, 10000, 30000, 100000),
labels = comma) +
scale_size(breaks = c(0, 100, 500, 1000, 3000)) +
geom_smooth(method = "lm", se = FALSE, colour = "blue") +
labs(title = "Population and MPC beneficiaries by sub-district",
subtitle = "Size indicates dead/wounded per 100,0000",
x = "Population",
y = "Beneficiaries",
size = "Dead/wounded\nper 100k",
caption = "Data from Assistance Coordination Unit and Food Security and Livelihoods Cluster") +
theme(plot.caption = element_text(hjust = .5))
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(scales)
library(magrittr)
library(viridis)
library(patchwork)
library(DT)
library(sf)
library(plotly)
library(flextable)
library(ggrastr)
library(htmlwidgets)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE)) %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE), .groups = "drop")
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
nw_pcode3 <- hno %>%
filter(ao_c == "NW") %>%
pull(admin3pcode)
hno <- read_excel("./data/2023HNO_PiN_Severity_detailedAoI_FORSHARE 15032023.xlsx", skip = 1,
sheet = 1) %>%
clean_names()
nw_pcode3 <- hno %>%
filter(ao_c == "NW") %>%
pull(admin3pcode)
nw_pcode3 %>% write_csv("nw_pcode3.csv")
nw_pcode3 %>%
as_tibble() %>%
write_csv("nw_pcode3.csv")
library(ggrepel)
pcode3_shape <-
st_read("./data/syr_admbnda_uncs_unocha_20201217/syr_admbnda_adm3_uncs_unocha_20201217.shp",
quiet = TRUE)
pcode3_shape <-
sfst_read("./data/syr_admbnda_uncs_unocha_20201217/syr_admbnda_adm3_uncs_unocha_20201217.shp",
quiet = TRUE)
pcode3_shape <-
sf::st_read("./data/syr_admbnda_uncs_unocha_20201217/syr_admbnda_adm3_uncs_unocha_20201217.shp",
quiet = TRUE)
pcode3_shape <-
sf::st_read("./data/syr_admbnda_uncs_unocha_20201217/syr_admbnda_adm3_uncs_unocha_20201217.shp",
quiet = TRUE)
locations <- read_excel("./data/Locations.xlsx") %>%
clean_names()
library(magrittr)
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(scales)
library(magrittr)
library(viridis)
library(patchwork)
library(DT)
library(sf)
library(plotly)
library(flextable)
library(ggrastr)
library(htmlwidgets)
library(ggrepel)
library(magrittr)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE)) %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE), .groups = "drop")
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(scales)
library(magrittr)
library(viridis)
library(patchwork)
library(DT)
library(sf)
library(plotly)
library(flextable)
library(ggrepel)
library(magrittr)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE)) %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE), .groups = "drop")
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
pcode3_shape <-
sf::st_read("./data/syr_admbnda_uncs_unocha_20201217/syr_admbnda_adm3_uncs_unocha_20201217.shp",
quiet = TRUE)
locations <- read_excel("./data/Locations.xlsx") %>%
clean_names()
fsl <- read_csv("./data/for_report/fsl.csv") %>%
mutate(partner_code = ifelse(is.na(partner_code), "temp_1", partner_code))
sites <- read_csv("./data/for_report/sites.csv")
remove_sites <- read_csv("./data/for_report/sites_locations_fsl.csv") %>%
filter(!is.na(longitude_x) & !is.na(latitude_y)) %>%
st_as_sf(coords = c("longitude_x", "latitude_y"), crs = 4326) %>%
st_transform(st_crs(pcode3_shape)) %>%
mutate(intersection = as.integer(st_intersects(geometry, pcode3_shape)),
area = ifelse(is.na(intersection), "", pcode3_shape$ADM3_PCODE[intersection])) %>%
filter(is.na(intersection))
sites_locations_fsl <- read_csv("./data/for_report/sites_locations_fsl.csv") %>%
anti_join(remove_sites, by = c("site_name"))
names_eq <- c(
"date",
"governorate",
"district",
"sub_district",
"community",
"admin4",
"casualties",
"injuries",
"completely_destroyed_houses",
"damaged_unihabitable_houses",
"temporary_accommodation_centres",
"idps_in_all_centres",
"schools_as_accomodation_centres",
"idps_in_schools",
"tents_needed",
"blankets_mattresses_needed",
"temporary_accommodation_centres_available",
"accessible_civil_defense",
"latrines_available",
"meals_needed_per_day",
"need_blood_donations",
"health_services_available",
"necessary_medical_equipment",
"rubble_volunteers",
"telecoms_available",
"electricity_available",
"heating_fuel_needed"
)
eq <- read_excel("./data/syria-earthquake-impact-05-march-2023.xlsx",
sheet = "DATASET") %>%
setNames(names_eq) %>%
left_join(locations %>% select(admin4pcode, admin3pcode),
by = c("admin4" = "admin4pcode"))
hno <- read_excel("./data/2023HNO_PiN_Severity_detailedAoI_FORSHARE 15032023.xlsx", skip = 1,
sheet = 1) %>%
clean_names()
nw_pcode3 <- hno %>%
filter(ao_c == "NW") %>%
pull(admin3pcode)
# nw_pcode3 %>%
#   as_tibble() %>%
#   write_csv("nw_pcode3.csv")
eq %>%
filter(admin3pcode %in% nw_pcode3 &
district %in% c("Harim", "Idleb", "Jisr-Ash-Shugur",
"Afrin", "Jebel Saman", "A'zaz", "Jarablus", "Al Bab")) %>%
group_by(governorate, district, sub_district, admin3pcode) %>%
summarise(casualties = sum(casualties, na.rm = TRUE),
injuries = sum(injuries, na.rm = TRUE),
totally_damaged = sum(completely_destroyed_houses, na.rm = TRUE),
partially_damaged = sum(damaged_unihabitable_houses, na.rm = TRUE)) %>%
# Where is Ariha, and why is it showing up here
filter(district != "Ariha") %>%
left_join(hno %>%
filter(admin3pcode %in% nw_pcode3 &
admin2name_en %in% c("Harim", "Idleb", "Jisr-Ash-Shugur",
"Afrin", "Jebel Saman", "A'zaz", "Jarablus", "Al Bab")) %>%
group_by(admin3pcode) %>%
summarise(population = sum(total_population, na.rm = TRUE)),
by = "admin3pcode") %>%
mutate(wounded_dead = casualties + injuries,
damaged_houses = totally_damaged + partially_damaged,
wounded_dead_100k = round(wounded_dead / population * 100000, digits = 2),
damaged_houses_100k = round(damaged_houses / population * 100000, digits = 2)) %>%
left_join(fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
group_by(admin3pcode) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)),
by = "admin3pcode") %>%
ggplot(aes(x = population, y = beneficiaries)) +
geom_point(aes(size = wounded_dead_100k)) +
geom_label_repel(aes(label = sub_district),
box.padding = .35,
point.padding = .5,
segment.color = "grey50") +
scale_x_log10(breaks = c(0, 3000, 10000, 30000, 100000, 300000, 1000000),
labels = comma) +
scale_y_log10(breaks = c(0, 1000, 3000, 10000, 30000, 100000),
labels = comma) +
scale_size(breaks = c(0, 100, 500, 1000, 3000)) +
geom_smooth(method = "lm", se = FALSE, colour = "blue") +
labs(title = "Population and MPC beneficiaries by sub-district",
subtitle = "Size indicates dead/wounded per 100,0000",
x = "Population",
y = "Beneficiaries",
size = "Dead/wounded\nper 100k",
caption = "Data from Assistance Coordination Unit and Food Security and Livelihoods Cluster") +
theme(plot.caption = element_text(hjust = .5))
eq %>%
filter(admin3pcode %in% nw_pcode3 &
district %in% c("Harim", "Idleb", "Jisr-Ash-Shugur",
"Afrin", "Jebel Saman", "A'zaz", "Jarablus", "Al Bab")) %>%
group_by(governorate, district, sub_district, admin3pcode) %>%
summarise(casualties = sum(casualties, na.rm = TRUE),
injuries = sum(injuries, na.rm = TRUE),
totally_damaged = sum(completely_destroyed_houses, na.rm = TRUE),
partially_damaged = sum(damaged_unihabitable_houses, na.rm = TRUE)) %>%
# Where is Ariha, and why is it showing up here
filter(district != "Ariha") %>%
left_join(hno %>%
filter(admin3pcode %in% nw_pcode3 &
admin2name_en %in% c("Harim", "Idleb", "Jisr-Ash-Shugur",
"Afrin", "Jebel Saman", "A'zaz", "Jarablus", "Al Bab")) %>%
group_by(admin3pcode) %>%
summarise(population = sum(total_population, na.rm = TRUE)),
by = "admin3pcode") %>%
mutate(wounded_dead = casualties + injuries,
damaged_houses = totally_damaged + partially_damaged,
wounded_dead_100k = round(wounded_dead / population * 100000, digits = 2),
damaged_houses_100k = round(damaged_houses / population * 100000, digits = 2)) %>%
left_join(fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
group_by(admin3pcode) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)),
by = "admin3pcode") %>%
ggplot(aes(x = population, y = beneficiaries)) +
geom_point(aes(size = wounded_dead_100k)) +
geom_label_repel(aes(label = sub_district),
box.padding = .35,
point.padding = .5,
segment.color = "grey50") +
scale_x_log10(breaks = c(0, 3000, 10000, 30000, 100000, 300000, 1000000),
labels = comma) +
scale_y_log10(breaks = c(0, 1000, 3000, 10000, 30000, 100000),
labels = comma) +
scale_size(breaks = c(0, 100, 500, 1000, 3000)) +
geom_smooth(method = "lm", se = FALSE, colour = "blue", size = .5) +
labs(title = "Population and MPC beneficiaries by sub-district",
subtitle = "Size indicates dead/wounded per 100,0000",
x = "Population",
y = "Beneficiaries",
size = "Dead/wounded\nper 100k",
caption = "Data from Assistance Coordination Unit and Food Security and Livelihoods Cluster") +
theme(plot.caption = element_text(hjust = .5))
eq %>%
filter(admin3pcode %in% nw_pcode3 &
district %in% c("Harim", "Idleb", "Jisr-Ash-Shugur",
"Afrin", "Jebel Saman", "A'zaz", "Jarablus", "Al Bab")) %>%
group_by(governorate, district, sub_district, admin3pcode) %>%
summarise(casualties = sum(casualties, na.rm = TRUE),
injuries = sum(injuries, na.rm = TRUE),
totally_damaged = sum(completely_destroyed_houses, na.rm = TRUE),
partially_damaged = sum(damaged_unihabitable_houses, na.rm = TRUE)) %>%
# Where is Ariha, and why is it showing up here
filter(district != "Ariha") %>%
left_join(hno %>%
filter(admin3pcode %in% nw_pcode3 &
admin2name_en %in% c("Harim", "Idleb", "Jisr-Ash-Shugur",
"Afrin", "Jebel Saman", "A'zaz", "Jarablus", "Al Bab")) %>%
group_by(admin3pcode) %>%
summarise(population = sum(total_population, na.rm = TRUE)),
by = "admin3pcode") %>%
mutate(wounded_dead = casualties + injuries,
damaged_houses = totally_damaged + partially_damaged,
wounded_dead_100k = round(wounded_dead / population * 100000, digits = 2),
damaged_houses_100k = round(damaged_houses / population * 100000, digits = 2)) %>%
left_join(fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
group_by(admin3pcode) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)),
by = "admin3pcode") %>%
ggplot(aes(x = population, y = beneficiaries)) +
geom_point(aes(size = wounded_dead_100k)) +
geom_label_repel(aes(label = sub_district),
point.padding = .5,
segment.color = "grey50") +
scale_x_log10(breaks = c(0, 3000, 10000, 30000, 100000, 300000, 1000000),
labels = comma) +
scale_y_log10(breaks = c(0, 1000, 3000, 10000, 30000, 100000),
labels = comma) +
scale_size(breaks = c(0, 100, 500, 1000, 3000)) +
geom_smooth(method = "lm", se = FALSE, colour = "blue", size = .5) +
labs(title = "Population and MPC beneficiaries by sub-district",
subtitle = "Size indicates dead/wounded per 100,0000",
x = "Population",
y = "Beneficiaries",
size = "Dead/wounded\nper 100k",
caption = "Data from Assistance Coordination Unit and Food Security and Livelihoods Cluster") +
theme(plot.caption = element_text(hjust = .5))
eq %>%
filter(admin3pcode %in% nw_pcode3 &
district %in% c("Harim", "Idleb", "Jisr-Ash-Shugur",
"Afrin", "Jebel Saman", "A'zaz", "Jarablus", "Al Bab")) %>%
group_by(governorate, district, sub_district, admin3pcode) %>%
summarise(casualties = sum(casualties, na.rm = TRUE),
injuries = sum(injuries, na.rm = TRUE),
totally_damaged = sum(completely_destroyed_houses, na.rm = TRUE),
partially_damaged = sum(damaged_unihabitable_houses, na.rm = TRUE)) %>%
# Where is Ariha, and why is it showing up here
filter(district != "Ariha") %>%
left_join(hno %>%
filter(admin3pcode %in% nw_pcode3 &
admin2name_en %in% c("Harim", "Idleb", "Jisr-Ash-Shugur",
"Afrin", "Jebel Saman", "A'zaz", "Jarablus", "Al Bab")) %>%
group_by(admin3pcode) %>%
summarise(population = sum(total_population, na.rm = TRUE)),
by = "admin3pcode") %>%
mutate(wounded_dead = casualties + injuries,
damaged_houses = totally_damaged + partially_damaged,
wounded_dead_100k = round(wounded_dead / population * 100000, digits = 2),
damaged_houses_100k = round(damaged_houses / population * 100000, digits = 2)) %>%
left_join(fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
group_by(admin3pcode) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)),
by = "admin3pcode") %>%
ggplot(aes(x = population, y = beneficiaries)) +
geom_point(aes(size = wounded_dead_100k)) +
geom_text_repel(aes(label = sub_district),
point.padding = .5,
segment.color = "grey50") +
scale_x_log10(breaks = c(0, 3000, 10000, 30000, 100000, 300000, 1000000),
labels = comma) +
scale_y_log10(breaks = c(0, 1000, 3000, 10000, 30000, 100000),
labels = comma) +
scale_size(breaks = c(0, 100, 500, 1000, 3000)) +
geom_smooth(method = "lm", se = FALSE, colour = "blue", size = .5) +
labs(title = "Population and MPC beneficiaries by sub-district",
subtitle = "Size indicates dead/wounded per 100,0000",
x = "Population",
y = "Beneficiaries",
size = "Dead/wounded\nper 100k",
caption = "Data from Assistance Coordination Unit and Food Security and Livelihoods Cluster") +
theme(plot.caption = element_text(hjust = .5))
