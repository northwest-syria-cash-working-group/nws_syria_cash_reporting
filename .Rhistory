fsl <- read_csv("./data/for_report/fsl.csv") %>%
mutate(partner_code = ifelse(is.na(partner_code), "temp_1", partner_code))
sites <- read_csv("./data/for_report/sites.csv")
remove_sites <- read_csv("./data/for_report/sites_locations_fsl.csv") %>%
filter(!is.na(longitude_x) & !is.na(latitude_y)) %>%
st_as_sf(coords = c("longitude_x", "latitude_y"), crs = 4326) %>%
st_transform(st_crs(pcode3_shape)) %>%
mutate(intersection = as.integer(st_intersects(geometry, pcode3_shape)),
area = ifelse(is.na(intersection), "", pcode3_shape$ADM3_PCODE[intersection])) %>%
filter(is.na(intersection))
sites_locations_fsl <- read_csv("./data/for_report/sites_locations_fsl.csv") %>%
anti_join(remove_sites, by = "site")
sites_locations_fsl %>% glimpse()
locations
locations %>% glimpse()
sites
pcode3_shape <-
st_read("./data/syr_admbnda_uncs_unocha_20201217/syr_admbnda_adm3_uncs_unocha_20201217.shp",
quiet = TRUE)
locations <- read_excel("./data/Locations.xlsx") %>%
clean_names()
fsl <- read_csv("./data/for_report/fsl.csv") %>%
mutate(partner_code = ifelse(is.na(partner_code), "temp_1", partner_code))
sites <- read_csv("./data/for_report/sites.csv")
remove_sites <- read_csv("./data/for_report/sites_locations_fsl.csv") %>%
filter(!is.na(longitude_x) & !is.na(latitude_y)) %>%
st_as_sf(coords = c("longitude_x", "latitude_y"), crs = 4326) %>%
st_transform(st_crs(pcode3_shape)) %>%
mutate(intersection = as.integer(st_intersects(geometry, pcode3_shape)),
area = ifelse(is.na(intersection), "", pcode3_shape$ADM3_PCODE[intersection])) %>%
filter(is.na(intersection))
sites_locations_fsl <- read_csv("./data/for_report/sites_locations_fsl.csv") %>%
anti_join(remove_sites, by = "site")
read_csv("./data/for_report/sites_locations_fsl.csv")
sites_locations_fsl <- read_csv("./data/for_report/sites_locations_fsl.csv") %>%
anti_join(remove_sites, by = c("site_name" = "site"))
remove_sites
sites_locations_fsl <- read_csv("./data/for_report/sites_locations_fsl.csv") %>%
anti_join(remove_sites, by = c("site_name"))
fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
mutate(usd_total = families * quantity) %>%
summarise(usd_total = sum(usd_total, na.rm = TRUE),
families = sum(families, na.rm = TRUE),
beneficiaries = sum(beneficiaries, na.rm = TRUE))
fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>% {sum(.$beneficiaries)}
fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>% {sum(.$beneficiaries)} %>% format(big.mark = ",")
fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
mutate(usd_total = families * quantity) %>%
{sum(.$usd_total)} %>% format(big.mark = ",")
fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
summarise(n_distinct(implementing_partner))
fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
summarise(n_distinct(implementing_partner)) %>% pull()
fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
summarise(n_distinct(admin3pcode)) %>% pull()
sites %>%
select(governorate,
district,
sub_district,
community,
site_name,
longitude_x,
latitude_y,
families,
individuals,
focal_point = organization_name,
focal_contact = phone) %>%
datatable(options = list(pageLength = 10, scrollX = TRUE),
filter = list(position = "top", clear = FALSE),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center; font-size:120% ;',
"Reference table -- Collective sites, maintained by UNHCR")) %>%
formatStyle(0, target = "row", lineHeight = "80%", fontSize = "80%")
fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
mutate(usd_total = families * quantity) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
usd_total = sum(usd_total, na.rm = TRUE))
fsl %>% filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
filter(quantity > 100) %>%
{sum(.$beneficiaries)}
fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
filter(quantity > 100) %>%
mutate(usd_total = families * quantity) %>%
group_by(partner_code) %>%
summarise(usd_total = sum(usd_total, na.rm = TRUE),
families = sum(families, na.rm = TRUE)) %>%
mutate(usd_per_fam = round(usd_total / families, digits = 2)) %>%
arrange(desc(usd_total)) %>%
flextable() %>%
set_caption("USD ") %>%
theme_zebra() %>%
flextable::set_table_properties(layout = "autofit", width = .8)
fsl <- read_csv("./data/for_report/fsl.csv") %>%
mutate(partner_code = ifelse(is.na(partner_code), "temp_1", partner_code))
fsl <- read_csv("./data/for_report/fsl.csv") %>%
mutate(partner_code = ifelse(is.na(partner_code), "temp_1", partner_code))
fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
group_by(partner_code,
admin2pcode,
admin4pcode) %>%
slice(which.max(beneficiaries)) %>%
ungroup() %>%
group_by(partner_code) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
districts = n_distinct(admin2pcode),
communities = n_distinct(admin4pcode)) %>%
arrange(desc(beneficiaries)) %>%
head(10) %>%
flextable() %>%
set_caption("Summary table -- top 10 cash response actors") %>%
theme_zebra() %>%
set_table_properties(layout = "autofit", width = .8) %>%
footnote(as_paragraph("Only partners who provided more than USD 100/family/month"),
i = 1, j = 1)
fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
group_by(partner_code,
admin2pcode,
admin4pcode) %>%
slice(which.max(beneficiaries)) %>%
ungroup() %>%
group_by(partner_code) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
districts = n_distinct(admin2pcode),
communities = n_distinct(admin4pcode)) %>%
arrange(desc(beneficiaries)) %>%
head(10) %>%
flextable() %>%
set_caption("Summary table -- top 10 cash response actors") %>%
theme_zebra() %>%
set_table_properties(layout = "autofit", width = .8) %>%
footnote(as_paragraph("Only partners who provided more than USD 100/family/month"),
i = 0, j = 1)
fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
group_by(partner_code,
admin2pcode,
admin4pcode) %>%
slice(which.max(beneficiaries)) %>%
ungroup() %>%
group_by(partner_code) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
districts = n_distinct(admin2pcode),
communities = n_distinct(admin4pcode)) %>%
arrange(desc(beneficiaries)) %>%
head(10) %>%
flextable() %>%
set_caption("Summary table -- top 10 cash response actors") %>%
theme_zebra() %>%
set_table_properties(layout = "autofit", width = .8) %>%
footnote(as_paragraph("Only partners who provided more than USD 100/family/month"),
i = 1, j = 1)
fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
group_by(partner_code,
admin2pcode,
admin4pcode) %>%
slice(which.max(beneficiaries)) %>%
ungroup() %>%
group_by(partner_code) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
districts = n_distinct(admin2pcode),
communities = n_distinct(admin4pcode)) %>%
arrange(desc(beneficiaries)) %>%
head(10) %>%
flextable() %>%
set_caption("Summary table -- top 10 cash response actors") %>%
theme_zebra() %>%
set_table_properties(layout = "autofit", width = .8) %>%
footnote(as_paragraph("Only partners who provided more than USD 100/family/month"),
i = 1, j = 1:2)
fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
group_by(partner_code,
admin2pcode,
admin4pcode) %>%
slice(which.max(beneficiaries)) %>%
ungroup() %>%
group_by(partner_code) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
districts = n_distinct(admin2pcode),
communities = n_distinct(admin4pcode)) %>%
arrange(desc(beneficiaries)) %>%
head(10) %>%
flextable() %>%
set_caption("Summary table -- top 10 cash response actors") %>%
theme_zebra() %>%
set_table_properties(layout = "autofit", width = .8) %>%
footnote(as_paragraph("Only partners who provided more than USD 100/family/month"),
i = 1, j = 1, part = "header")
fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
filter(quantity > 100) %>%
mutate(usd_total = families * quantity) %>%
group_by(partner_code) %>%
summarise(usd_total = sum(usd_total, na.rm = TRUE),
families = sum(families, na.rm = TRUE)) %>%
mutate(usd_per_fam = round(usd_total / families, digits = 2)) %>%
arrange(desc(usd_total)) %>%
flextable() %>%
set_caption("USD disbursed and familiies reached by partner") %>%
theme_zebra() %>%
flextable::set_table_properties(layout = "autofit", width = .8)
fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
filter(quantity > 100) %>%
mutate(usd_total = families * quantity) %>%
group_by(partner_code) %>%
summarise(usd_total = sum(usd_total, na.rm = TRUE),
families = sum(families, na.rm = TRUE)) %>%
mutate(usd_per_fam = round(usd_total / families, digits = 2),
pc_of_total = round(usd_total / sum(usd_total) * 100,
digits = 2)) %>%
arrange(desc(usd_total)) %>%
flextable() %>%
set_caption("USD disbursed and families reached by partner") %>%
theme_zebra() %>%
flextable::set_table_properties(layout = "autofit", width = .8)
fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
filter(quantity > 100) %>%
mutate(usd_total = families * quantity) %>%
group_by(partner_code) %>%
summarise(usd_total = sum(usd_total, na.rm = TRUE),
families = sum(families, na.rm = TRUE)) %>%
mutate(usd_per_fam = round(usd_total / families, digits = 2),
`%_usd_total` = round(usd_total / sum(usd_total) * 100,
digits = 2)) %>%
arrange(desc(usd_total)) %>%
flextable() %>%
set_caption("USD disbursed and families reached by partner") %>%
theme_zebra() %>%
flextable::set_table_properties(layout = "autofit", width = .8)
r format(Sys.time(), "%B %d %Y")
format(Sys.time(), "%B %d %Y")
fsl %>% filter(activity == "Cash Response" & planned_implemented == "Implemented") %>% {sum(.$beneficiaries)} %>% format(big.mark = ",")
fsl %>% filter(activity == "Cash Response" & planned_implemented == "Implemented") %>% {sum(.$families)} %>% format(big.mark = ",")
r fsl %>% filter(activity == "Cash Response" & planned_implemented == "Implemented") %>% mutate(usd_total = families * quantity) %>%  {sum(.$usd_total)} %>% format(big.mark = ",")
fsl %>% filter(activity == "Cash Response" & planned_implemented == "Implemented") %>% mutate(usd_total = families * quantity) %>%  {sum(.$usd_total)} %>% format(big.mark = ",")
fsl %>% filter(activity == "Cash Response" & planned_implemented == "Implemented") %>% summarise(n_distinct(implementing_partner)) %>% pull()
fsl %>% filter(activity == "Cash Response" & planned_implemented == "Implemented") %>% summarise(n_distinct(implementing_partner)) %>% pull()
fsl %>% filter(activity == "Cash Response" & planned_implemented == "Implemented") %>% summarise(n_distinct(partner_code)) %>% pull()
fsl %>% filter(activity == "Cash Response" & planned_implemented == "Implemented") %>% summarise(n_distinct(admin3pcode)) %>% pull()
site_map <- pcode3_shape %>%
filter(ADM1_PCODE %in% c("SY02", "SY07")) %>%
left_join(sites_locations_fsl,
by = c("ADM1_PCODE" = "admin1pcode")) %>%
st_as_sf() %>%
mutate(type = fct_relevel(type,
c("RC/IDP", "Beneficiaries"))) %>%
ggplot() +
geom_sf(size = 0.1) +
geom_point(aes(size = persons,
colour = type,
x = longitude_x, y = latitude_y,
text = paste0(sub_district, "\n",
site_name, "\n",
site_name_ar, "\n",
"persons: ", persons, "\n",
"type: ", type, "\n",
"x: ", longitude_x, "\n",
"y: ", latitude_y
)),
alpha = .1, pch = 1
# Adjusting alpha won't affect a plotly
) +
scale_size_continuous(labels = comma) +
theme_void() +
theme(plot.background = element_rect(fill = "white", colour = NA),
plot.caption = element_text(hjust = 0.5)) +
labs(title = "Collective/reception centres and MPC beneficiaries",
subtitle = "IDPs in red, beneficiaries in blue, size shows number of persons")
ggplotly(site_map, tooltip = c("text")) %>%
plotly::style(hoveron = "point") %>%
layout(title = list(text = paste0("Collective/Reception centres and cash response beneficiaries",
"<br>",
"<sup>",
"IDPs in red, beneficiaries in blue, size shows number of persons; click and drag to zoom")))
install.packages("ggrastr")
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(scales)
library(magrittr)
library(kableExtra)
library(viridis)
library(skimr)
library(patchwork)
library(DT)
library(here)
library(sf)
library(googlesheets4)
library(plotly)
library(flextable)
library(ggrastr)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE)) %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE), .groups = "drop")
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
knitr::opts_chunk$set(dev="png")
pcode3_shape <-
st_read("./data/syr_admbnda_uncs_unocha_20201217/syr_admbnda_adm3_uncs_unocha_20201217.shp",
quiet = TRUE)
locations <- read_excel("./data/Locations.xlsx") %>%
clean_names()
fsl <- read_csv("./data/for_report/fsl.csv") %>%
mutate(partner_code = ifelse(is.na(partner_code), "temp_1", partner_code))
sites <- read_csv("./data/for_report/sites.csv")
remove_sites <- read_csv("./data/for_report/sites_locations_fsl.csv") %>%
filter(!is.na(longitude_x) & !is.na(latitude_y)) %>%
st_as_sf(coords = c("longitude_x", "latitude_y"), crs = 4326) %>%
st_transform(st_crs(pcode3_shape)) %>%
mutate(intersection = as.integer(st_intersects(geometry, pcode3_shape)),
area = ifelse(is.na(intersection), "", pcode3_shape$ADM3_PCODE[intersection])) %>%
filter(is.na(intersection))
sites_locations_fsl <- read_csv("./data/for_report/sites_locations_fsl.csv") %>%
anti_join(remove_sites, by = c("site_name"))
site_map <- pcode3_shape %>%
filter(ADM1_PCODE %in% c("SY02", "SY07")) %>%
left_join(sites_locations_fsl,
by = c("ADM1_PCODE" = "admin1pcode")) %>%
st_as_sf() %>%
mutate(type = fct_relevel(type,
c("RC/IDP", "Beneficiaries"))) %>%
ggplot() +
geom_sf(size = 0.1) +
geom_point_rast(aes(size = persons,
colour = type,
x = longitude_x, y = latitude_y,
text = paste0("sub_district: ", sub_district, "\n",
"site :", site_name, "\n",
"persons: ", persons, "\n",
"type: ", type
)),
alpha = .1, pch = 1
# Adjusting alpha won't affect a plotly
) +
scale_size_continuous(labels = comma) +
theme_void() +
theme(plot.background = element_rect(fill = "white", colour = NA),
plot.caption = element_text(hjust = 0.5),
legend.position = "none") +
labs(title = "Collective/reception centres and MPC beneficiaries",
subtitle = "IDPs in red, beneficiaries in blue, size shows number of persons")
ggplotly(site_map, tooltip = c("text")) %>%
plotly::style(hoveron = "point") %>%
layout(title = list(text = paste0("Collective/Reception centres and cash response beneficiaries",
"<br>",
"<sup>",
"IDPs in red, beneficiaries in blue, size shows number of persons; click and drag to zoom; mouse over for details")))
ggplotly(site_map, tooltip = c("text")) %>%
plotly::style(hoveron = "point") %>%
layout(title = list(text = paste0("Collective/Reception centres and cash response beneficiaries",
"<br>",
"<sup>",
"IDPs in red, beneficiaries in blue, size shows number of persons; click and drag to zoom; mouse over for details")))
library(htmlwidgets)
sites_map <- ggplotly(site_map, tooltip = c("text")) %>%
plotly::style(hoveron = "point") %>%
layout(title = list(text = paste0("Collective/Reception centres and cash response beneficiaries",
"<br>",
"<sup>",
"IDPs in red, beneficiaries in blue, size shows number of persons; click and drag to zoom; mouse over for details")))
saveWidget(sites_map, "sites_map.html", selfcontained = TRUE)
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(scales)
library(magrittr)
library(viridis)
library(patchwork)
library(DT)
library(sf)
library(plotly)
library(flextable)
library(ggrastr)
library(htmlwidgets)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE)) %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE), .groups = "drop")
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
knitr::opts_chunk$set(dev="png")
pcode3_shape <-
st_read("./data/syr_admbnda_uncs_unocha_20201217/syr_admbnda_adm3_uncs_unocha_20201217.shp",
quiet = TRUE)
locations <- read_excel("./data/Locations.xlsx") %>%
clean_names()
fsl <- read_csv("./data/for_report/fsl.csv") %>%
mutate(partner_code = ifelse(is.na(partner_code), "temp_1", partner_code))
sites <- read_csv("./data/for_report/sites.csv")
remove_sites <- read_csv("./data/for_report/sites_locations_fsl.csv") %>%
filter(!is.na(longitude_x) & !is.na(latitude_y)) %>%
st_as_sf(coords = c("longitude_x", "latitude_y"), crs = 4326) %>%
st_transform(st_crs(pcode3_shape)) %>%
mutate(intersection = as.integer(st_intersects(geometry, pcode3_shape)),
area = ifelse(is.na(intersection), "", pcode3_shape$ADM3_PCODE[intersection])) %>%
filter(is.na(intersection))
sites_locations_fsl <- read_csv("./data/for_report/sites_locations_fsl.csv") %>%
anti_join(remove_sites, by = c("site_name"))
fsl %>%
glimpse()
fsl %>%
count(village_camps, wt = beneficiaries)
fsl %>%
count(activity)
fsl %>%
filter(activity == "Cash Response" & planned_implemented == "implemented") %>%
count(village_camps, wt = beneficiaries)
fsl %>%
filter(activity == "Cash Response" & planned_implemented == "Implemented") %>%
count(village_camps, wt = beneficiaries)
fsl %>% glimpse()
fsl %>%
filter(str_detect(camp_name, "Drighina"))
